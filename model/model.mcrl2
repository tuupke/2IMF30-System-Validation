sort
  Place = struct I | O | P | S1 | S2 | RO | RI;
  Door  = struct insideDoor | outsideDoor;
  Sluice= struct Sluice1 | Sluice2;
  WaferState = struct empty?isEmpty | unprojected?isUnprojected | projected?isProjected;
  WaferPlacement = Place -> WaferState;
  Pressure = struct vacuum | normal;
  
map
  emptyPlaces: WaferPlacement;
  update: WaferPlacement # Place # Place -> WaferPlacement;
  
  sluicePlace: Sluice -> Place;
  sluicePressure: Sluice -> Pressure;
  
var
  p,p':Place;
  wp:WaferPlacement;
eqn
  emptyPlaces(p) = empty;
  update(wp, p, p') = wp[p'->wp(p)][p->empty];
  
  sluicePlace(Sluice1) = S1;
  sluicePlace(Sluice2) = S2;
  
  sluicePressure(Sluice1) = normal;
  sluicePressure(Sluice2) = normal;

act
  % Extenal
  move: Place # Place;
  closeDoor, openDoor, doorStuck: Door # Sluice;
  vacuum, deVacuum, stopPumping: Sluice;
  readAirPressure: Sluice # Pressure;
  beginProject, endProject,  detectInputWafer;
  
  % Sluicedoor Communication
  isOpen, moveThrough, canClose, signalClose, moving: Door # Sluice;
  tryOpenDoor, tryCloseDoor, allowOpenDoor, allowCloseDoor: Door # Sluice;
  
  
  % Wafer tracking
  moveRequest: Place # Place;
  moveAllow:   Place # Place;
  endProject_internal, updateProjectedness;
  
  % Debug
  debug: WaferPlacement;

proc
  SluiceInit(s:Sluice)         = tryCloseDoor(insideDoor, s).tryCloseDoor(outsideDoor, s).ClosedSluice(s);
  ClosedSluice(s:Sluice)       =
	readAirPressure(s, vacuum).(
		tryOpenDoor(insideDoor, s).OpenSluice(insideDoor, s)
		+
		ClosedSluice(s)
	)
	+
	readAirPressure(s, normal).(
		tryOpenDoor(outsideDoor, s).OpenSluice(outsideDoor, s)
		+
		ClosedSluice(s)
	)
	+
	vacuum(s)  .stopPumping(s).ClosedSluice(s)
	+
	deVacuum(s).stopPumping(s).ClosedSluice(s);
	
  OpenSluice(d:Door, s:Sluice) = isOpen(d, s).canClose(d, s).OpenSluice(d, s) + tryCloseDoor(d, s).ClosedSluice(s);
  
  SluiceDoorSafeguard          = SluiceDoor(insideDoor, Sluice1) || SluiceDoor(insideDoor, Sluice2) || SluiceDoor(outsideDoor, Sluice1) || SluiceDoor(outsideDoor, Sluice2);
  SluiceDoor(d:Door, s:Sluice) = doorStuck(d,s) + (allowOpenDoor(d, s) + allowCloseDoor(d, s)).SluiceDoor(d,s);
  
  RobotOutside = sum s:Sluice.moveThrough(outsideDoor, s).((
			moveRequest(sluicePlace(s), RO) +
			moveRequest(sluicePlace(s), RI) +
			moveRequest(RI, sluicePlace(s))
		).signalClose(outsideDoor, s)
		+ signalClose(outsideDoor, s)
	).RobotOutside;
  
  RobotInside  = sum s:Sluice.moveThrough(insideDoor, s).((
			moveRequest(O, sluicePlace(s)) +
			moveRequest(sluicePlace(s), I)
		).signalClose(insideDoor, s)
		+ signalClose(insideDoor, s)
	).RobotInside;
  
  ProjectorRobot = moveRequest(I, P).beginProject.endProject_internal.moveRequest(P,O).ProjectorRobot;
  
  WaferTracker(wp:WaferPlacement) =
	detectInputWafer.(isEmpty(wp(RI)))->
			WaferTracker(wp[RI->unprojected])
		<>
			WaferTracker(wp)
	+
	(!isEmpty(wp(P)))->updateProjectedness.WaferTracker(wp[P->projected])
	+
	sum p:Place . sum p':Place .
		((isEmpty(wp(p')) || p' == RO || p' == RI) && !isEmpty(wp(p)))->
			(
				% ensure that wafer go in the right direction (unprojected towards the projector, projected away from the projector)
				% sluices work in two diretions, so they are excluded from this
				
				!(p' == RI && isProjected(wp(p))) &&
				!(p' == I  && isProjected(wp(p))) &&
				!(p' == P  && isProjected(wp(p))) &&
				!(p' == O  && isUnprojected(wp(p))) &&
				!(p' == RO && isUnprojected(wp(p)))
			)->
				moveAllow(p, p').WaferTracker(update(wp,p,p'));

init
	hide({
			moving
		},
		allow({
				openDoor,
				closeDoor,
				move,
				detectInputWafer,
				readAirPressure,
				vacuum,
				deVacuum,
				stopPumping,
				beginProject,
				endProject,
				doorStuck,
				
				moving
			},
			comm({
				moveThrough        |isOpen              -> moving,
				canClose           |signalClose         -> moving,
				moveRequest        |moveAllow           -> move,
				tryCloseDoor       |allowCloseDoor      -> closeDoor,
				tryOpenDoor        |allowOpenDoor       -> openDoor,
				endProject_internal|updateProjectedness -> endProject
			},
				% Without init of sluices, only 1 sluice for PositionTracker debugging
				%ClosedSluice(Sluice1)|| RobotInside || RobotOutside || WaferTracker(emptyPlaces)
				
				% Without initilisation of sluices the LTS is much cleaner
				%ClosedSluice(Sluice1) || ClosedSluice(Sluice2) || RobotInside || RobotOutside || WaferTracker(emptyPlaces)
				
				% Complete process, complete mess :)
				SluiceInit(Sluice1) || SluiceInit(Sluice2) || RobotInside || RobotOutside || WaferTracker(emptyPlaces) || ProjectorRobot || SluiceDoorSafeguard
			)
		)
	)
	;
