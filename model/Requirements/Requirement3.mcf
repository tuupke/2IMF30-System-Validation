% Any wafer in the system will eventually be processed unless for each sluice at least one door gets stuck, or the wafer is in a sluice with two broken, closed doors

nu X(openDoors: Sluice -> (Door -> Bool) = sluiceDoorsFalse, brokenDoors: Sluice -> (Door -> Bool) = sluiceDoorsFalse)
  . ([!(exists d: Door, s: Sluice . openDoor(d, s)) && !(exists d: Door, s: Sluice . closeDoor(d, s)) && !(exists d: Door, s: Sluice . doorStuck(d, s)) && !detectInputWafer]X(openDoors, brokenDoors)
      && forall d: Door, s: Sluice . ([openDoor(d, s)]X(openDoors[s -> openDoors(s)[d -> true]], brokenDoors)
                                      && [closeDoor(d, s)]X(openDoors[s -> openDoors(s)[d -> false]], brokenDoors)
                                      && [doorStuck(d, s)]X(openDoors, brokenDoors[s -> brokenDoors(s)[d -> false]])
                                     )
      && [detectInputWafer]mu Y(position: Place = RI, projecting: Bool = false, projected: Bool = false, openDoorsLocal: Sluice -> (Door -> Bool) = openDoors, brokenDoorsLocal: Sluice -> (Door -> Bool) = brokenDoors)
                            . (([!(exists a, b: Place . move(a, b)) && !beginProject && !endProject && !(exists d: Door, s: Sluice . doorStuck(d, s)) && !(exists d: Door, s: Sluice . openDoor(d, s)) && !(exists d: Door, s: Sluice . closeDoor(d, s))]Y(position, projecting, projected, openDoorsLocal, brokenDoorsLocal)
                                && forall a, b: Place . [move(a, b)]Y(if(a == position, b, position), projecting && a != position, projected, openDoorsLocal, brokenDoorsLocal)
                                && [beginProject]Y(position, position == P, projected, openDoorsLocal, brokenDoorsLocal)
                                && [endProject]Y(position, false, projected || (position == P && projecting), openDoorsLocal, brokenDoorsLocal)
                                && forall d: Door, s: Sluice . ([doorStuck(d, s)]Y(position, projecting, projected, openDoorsLocal, brokenDoorsLocal[s -> brokenDoorsLocal(s)[d -> true]])
                                                                && [closeDoor(d, s)]Y(position, projecting, projected, openDoorsLocal[s -> openDoorsLocal(s)[d -> true]], brokenDoorsLocal)
                                                                && [openDoor(d, s)]Y(position, projecting, projected, openDoorsLocal[s -> openDoorsLocal(s)[d -> false]], brokenDoorsLocal)
                                                               )
                                && <true>true
                               ) || val(position == RO && projected)
                                 || val(forall s: Sluice . exists d: Door . brokenDoorsLocal(s)(d))
                                 || val(exists s: Sluice . position == sluicePlace(s) && forall d: Door . !openDoorsLocal(s)(d) && brokenDoorsLocal(s)(d))
                              )
    )
